package com.example.huevo

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.huevo.ui.theme.HuevoTheme
import kotlinx.coroutines.delay
import androidx.compose.runtime.saveable.rememberSaveable

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            HuevoTheme {
                EggGame(modifier = Modifier.fillMaxSize())
            }
        }
    }
}

@Composable
fun EggGame(modifier: Modifier = Modifier) {
    // ✅ Ahora el progreso sobrevive a los giros de pantalla
    var taps by rememberSaveable { mutableStateOf(0) }
    var tapped by remember { mutableStateOf(false) }

    val crackGoal = 10
    val hatchGoal = 20

    val (emoji, message) = when {
        taps >= hatchGoal -> "🐣" to "¡Ha nacido!"
        taps >= crackGoal -> "💥🥚" to "¡Se agrieta!"
        else -> "🥚" to "Toca el huevo"
    }

    val progress = (taps.coerceAtMost(hatchGoal).toFloat()) / hatchGoal

    val scale by animateFloatAsState(
        targetValue = if (tapped) 1.2f else 1f,
        spring(stiffness = Spring.StiffnessMedium)
    )

    Column(
        modifier = modifier.padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = emoji,
            fontSize = 120.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .scale(scale)
                .clickable(enabled = taps < hatchGoal) {
                    taps++
                    tapped = true
                }
        )

        LaunchedEffect(tapped) {
            if (tapped) {
                delay(100)
                tapped = false
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        LinearProgressIndicator(
            progress = progress,
            modifier = Modifier
                .fillMaxWidth()
                .height(16.dp)
        )

        Spacer(modifier = Modifier.height(8.dp))

        Text(
            text = "Progreso: ${(progress * 100).toInt()}%",
            fontSize = 18.sp,
            fontWeight = FontWeight.Medium
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Taps: $taps",
            fontSize = 24.sp,
            fontWeight = FontWeight.Medium
        )

        Text(
            text = message,
            fontSize = 24.sp,
            fontWeight = FontWeight.Medium
        )

        Spacer(modifier = Modifier.height(24.dp))

        Row(
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Button(onClick = { taps = 0 }) {
                Text("Reset")
            }
            Button(onClick = { taps = (taps + 5).coerceAtMost(hatchGoal) }) {
                Text("+5 Boost")
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun EggGamePreview() {
    HuevoTheme {
        EggGame(modifier = Modifier.fillMaxSize())
    }
}
